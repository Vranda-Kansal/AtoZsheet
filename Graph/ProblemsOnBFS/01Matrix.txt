Intuition
Again there is question where I need to traverse in 4 directions. so see in question it is said that for each one find the nearest zero.

Points to be noted here:

first zero which reach to the one the distance for the one would be the distance taken to reach from that zero to that one. means other zero may be reach to that one after some more iteration but the first zero which reaches to that one would be minimum distance away from that particular one.
Approach
We would initally traverse from all zero and the distance is zero from that
as we move forward if the cell is one and it is not visited that distance would get increase via 1
at last we would return to the grid.
Complexity
Time complexity:
O(nm) + O(nm4) ~ O(nm)
Space complexity:
O(nm) + O(nm)
Code
class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        vector<vector<int>> vis(m, vector<int>(n, 0));
        queue<pair<int, pair<int ,int>>> q;

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 0){
                    q.push({0, {i, j}});
                    vis[i][j] = 1;
                }
            }
        }
        int DR[] = {-1, 0, 1, 0};
        int DC[] = {0, 1, 0, -1};

        while(!q.empty()){
            int siz = q.size();
            for(int i=0; i<siz; i++){
                auto node = q.front();
                q.pop();
                int step = node.first;
                int row = node.second.first;
                int col = node.second.second;
                grid[row][col] = step;

                for(int k=0; k<4; k++){
                    int newRow = row + DR[k];
                    int newCol = col + DC[k];

                    if(newRow >=0 && newRow <m && newCol >=0 && newCol <n && grid[newRow][newCol] == 1 && !vis[newRow][newCol]){
                        q.push({step+1, {newRow, newCol}});
                        vis[newRow][newCol] = 1;
                    }
                }
            }
        }
        return grid;
    }
};